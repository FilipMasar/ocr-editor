/**
 * Main process entry point for the Electron application
 */
import { app, BrowserWindow, shell, ipcMain } from 'electron';
import path from 'path';
import fs from 'fs';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Import the type-safe handler registrars
import { 
  registerProjectHandlers,
  registerEditorHandlers,
  registerConfigHandlers,
  registerLoggingHandlers
} from './handlers';

// Import services
import { loggingService } from './services';

// Set the appropriate path for userAppData
const userAppData = path.join(app.getPath('appData'), 'ocr-editor');
export { userAppData };

// Global reference to the mainWindow
export let mainWindow: BrowserWindow | null = null;

/**
 * Function to get the main window, used by IPC handlers
 */
const getMainWindow = (): BrowserWindow | null => mainWindow;

/**
 * Handles unhandled errors and logs them
 */
function setupGlobalErrorHandling(): void {
  // Handle unhandled rejections
  process.on('unhandledRejection', (reason, promise) => {
    loggingService.error(
      'Process',
      'Unhandled promise rejection',
      reason instanceof Error ? reason : new Error(String(reason))
    );
  });

  // Handle uncaught exceptions
  process.on('uncaughtException', (error) => {
    loggingService.error('Process', 'Uncaught exception', error);
    
    // If this is a fatal error, wait for the log to be written before exiting
    setTimeout(() => {
      process.exit(1);
    }, 1000);
  });
}

/**
 * Creates the main window of the application
 */
function createWindow(): void {
  // Create the browser window
  mainWindow = new BrowserWindow({
    width: 1280,
    height: 800,
    show: false,
    autoHideMenuBar: true,
    webPreferences: {
      // Preload script: Look for it in the .webpack directory where Forge builds it
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      sandbox: false,
      contextIsolation: true,
      nodeIntegration: false,
    }
  });

  // Register all type-safe IPC handlers
  registerProjectHandlers(ipcMain, getMainWindow);
  registerEditorHandlers(ipcMain);
  registerConfigHandlers(ipcMain);
  registerLoggingHandlers(ipcMain);

  mainWindow.on('ready-to-show', () => {
    if (mainWindow) {
      mainWindow.show();
    }
  });

  mainWindow.webContents.setWindowOpenHandler((details) => {
    shell.openExternal(details.url);
    return { action: 'deny' };
  });

  // Load the main window using Forge's auto-generated entry point
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  
  // Open the DevTools in development mode
  if (process.env.NODE_ENV === 'development') {
    mainWindow.webContents.openDevTools();
  }

  // Log window creation
  loggingService.info('Application', 'Main window created');
}

// Initialize the app when it's ready
app.whenReady().then(() => {
  // Set up global error handling
  setupGlobalErrorHandling();

  // Create the app data directory if it doesn't exist
  if (!fs.existsSync(userAppData)) {
    fs.mkdirSync(userAppData, { recursive: true });
  }

  // Create the main window
  createWindow();

  app.on('activate', function () {
    // On macOS, it's common to re-create a window when the dock icon is clicked
    if (BrowserWindow.getAllWindows().length === 0) createWindow();
  });
});

// Quit when all windows are closed
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
}); 